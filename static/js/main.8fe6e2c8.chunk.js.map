{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","App.tsx","api.ts","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","FindMovie","inputValue","setInputValue","loadMovie","showError","setShowError","showLoading","setShowLoading","onAddMovie","showMovie","useState","showBtnAddList","setShowBtnAddList","onSubmit","event","preventDefault","htmlFor","type","id","placeholder","value","onChange","target","disabled","onClick","App","setMovies","setTitle","newMovie","setNewMovie","setShowMovie","getNewMovie","Poster","Title","Plot","imdbID","a","query","fetch","then","res","json","catch","Response","Error","finally","undefined","isMovieExist","some","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8fe6e2c8.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie | undefined | null,\n};\n\nexport const MovieCard: React.FC<Props> = ({\n  movie,\n}) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie?.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie?.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie?.description}\n        <br />\n        <a href={movie?.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import React, { useState } from 'react';\nimport { Movie } from '../../types/Movie';\nimport './FindMovie.scss';\nimport { MovieCard } from '../MovieCard';\n\ntype Props = {\n  setInputValue: (inputValue: string) => void;\n  inputValue: string;\n  loadMovie: () => void;\n  movie: Movie | null | undefined;\n  setShowError: (show: boolean) => void;\n  showError: boolean;\n  showLoading: boolean;\n  onAddMovie: () => void;\n  setShowLoading: (show: boolean) => void;\n  showMovie: boolean;\n};\n\nexport const FindMovie: React.FC<Props> = ({\n  inputValue,\n  setInputValue,\n  loadMovie,\n  movie,\n  showError,\n  setShowError,\n  showLoading,\n  setShowLoading,\n  onAddMovie,\n  showMovie,\n}) => {\n  const [showBtnAddList, setShowBtnAddList] = useState<boolean>(false);\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={(event) => {\n          event.preventDefault();\n          loadMovie();\n          setShowBtnAddList(true);\n          setShowLoading(true);\n        }}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-danger\"\n              value={inputValue}\n              onChange={({ target }) => {\n                setInputValue(target.value);\n                setShowError(false);\n              }}\n            />\n          </div>\n\n          {showError && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={`button is-${showLoading ? 'loading' : 'light'}`}\n              disabled={!inputValue}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          {showBtnAddList && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={() => onAddMovie()}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n\n        </div>\n      </form>\n\n      <div className=\"container\" data-cy=\"previewContainer\">\n        <h2 className=\"title\">Preview</h2>\n        {showMovie && (\n          <MovieCard\n            movie={movie}\n          />\n        )}\n      </div>\n    </>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\nimport { getMovie } from './api';\nimport { MovieData } from './types/MovieData';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  // #region FindMovie\n  const [title, setTitle] = useState<string>('');\n  const [newMovie, setNewMovie] = useState<Movie | null | undefined>(null);\n  const [showError, setShowError] = useState<boolean>(false);\n  const [showLoading, setShowLoading] = useState<boolean>(false);\n  const [showMovie, setShowMovie] = useState<boolean>(false);\n\n  const getNewMovie = ({\n    Poster,\n    Title,\n    Plot,\n    imdbID,\n  }: MovieData) => {\n    setNewMovie({\n      title: Title,\n      description: Plot,\n      imdbUrl: `https://www.imdb.com/title/${imdbID}`,\n      imdbId: imdbID,\n      imgUrl: Poster === 'N/A'\n        ? 'https://via.placeholder.com/360x270.png?text=no%20preview'\n        : Poster,\n    });\n  };\n\n  const loadMovie = async () => {\n    try {\n      setShowLoading(true);\n      const movie = await getMovie(title)\n        .finally(() => setShowLoading(false));\n\n      setShowMovie(true);\n\n      if ('Error' in movie) {\n        throw new Error('Error');\n      } else {\n        getNewMovie(movie as MovieData);\n        setShowError(false);\n      }\n    } catch {\n      setNewMovie(undefined);\n      setShowError(true);\n      setShowMovie(false);\n    }\n  };\n  // #endregion\n\n  const addMovie = () => {\n    const isMovieExist = movies\n      .some(movie => movie.imdbId === newMovie?.imdbId);\n    const shouldAddMovie = movies.length === 0 || (!isMovieExist && newMovie);\n\n    if (shouldAddMovie && newMovie) {\n      setMovies([...movies, newMovie]);\n    }\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie\n          inputValue={title}\n          setInputValue={setTitle}\n          loadMovie={loadMovie}\n          movie={newMovie}\n          setShowError={setShowError}\n          showError={showError}\n          showLoading={showLoading}\n          onAddMovie={addMovie}\n          setShowLoading={setShowLoading}\n          showMovie={showMovie}\n        />\n      </div>\n    </div>\n  );\n};\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=942d14a8';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}